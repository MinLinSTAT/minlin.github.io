{
  "hash": "f8fdd19254c26d77a0b5c6bb955c55bc",
  "result": {
    "markdown": "---\ntitle: \"R Visualization\"\nformat: \n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\n    toc-location: left\neditor: visual\nimage: \"finalplot.png\"\n---\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\n## **Preparation**\n\nMake sure you have R version 4.3.0+ and RStudio installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nversion$version.string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R version 4.3.1 (2023-06-16 ucrt)\"\n```\n:::\n:::\n\n\nInstall `tidyverse` and `palmerpenguins` if you haven't done so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n[![](tidyverse.png)](https://www.tidyverse.org/)\n\n[![](palmerpenguins.png){fig-align=\"center\" width=\"153\"}](https://allisonhorst.github.io/palmerpenguins/index.html)\n\nYou only need to install a package once, but you need to load it every time you start a new session. Load `tidyverse` and `palmerpenguins`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins) # will use the data set\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'palmerpenguins' was built under R version 4.3.2\n```\n:::\n:::\n\n\n## **Data exploration loop**\n\n[![](data-science-explore.png)](https://r4ds.had.co.nz/explore-intro.html)\n\nOur ultimate goal in this workshop is to recreate the following visualization displaying the relationship between flipper lengths and bill lengths of penguins, taking into consideration the species of the penguin.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## **The penguins**\n\nThe `palmerpenguins` data contains size measurements for three penguin species observed on three islands in the Palmer Archipelago, Antarctica.\n\n![](gorman-penguins.jpg){fig-align=\"center\" width=\"663\"}\n\n![](antarctica-map.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nLet's `glimpse` the columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\nAmong the variables in `penguins` are:\n\n1.  `species`: a factor denoting penguin species (Adelie, Chinstrap, or Gentoo)\n\n2.  `bill_length_mm`: a number denoting bill length (millimeters)\n\n3.  `flipper_length_mm`: an integer denoting flipper length (millimeters)\n\n![](culmen_depth.png){fig-align=\"center\"}\n\nTo learn more about `penguins`, open its help page by running [`?penguins`](https://allisonhorst.github.io/palmerpenguins/reference/penguins.html).\n\n## **Creating a ggplot**\n\n`ggplot2` is a package in the `tidyverse` family. The \"**gg**\" in the name means \"grammar of graphics\" -- a scheme for data visualization which breaks up graphs into semantic components. Since we have loaded `tidyverse`, we don't need to load `ggplot2` again.\n\nLet's begin a plot with the function `ggplot()`, defining a plot object that we then add **layers** to. The first argument of `ggplot()` is the dataset to use in the graph and so `ggplot(data = penguins)` creates an empty graph that is primed to display the `penguin` data. We create an empty canvas that we'll paint the remaining layers of the plot onto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNext, we need to tell `ggplot()` how the information from our data will be visuallyv represented. The `mapping` argument of the `ggplot()` function defines how variables in the dataset are mapped to visual properties (**aesthetics**) of the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nBut where are the penguins??? We have not yet articulated, in our code, how to represent the observations from our data frame on our plot.\n\nTo do so, we need to define a **geom**: the geometrical object that a plot uses to represent data. Use the symbol `+` to connect the canvas `ggplot()` and the geometrical object `geom_point()`. We get a scatterplot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm)\n) + geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## **Adding regression lines**\n\nUse `geom_smooth()` to add a layer of smooth curve. Specify `method = \"lm\"` to fit a linear model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm)\n) + geom_point() + \n        geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWhat does the relationship between flipper length and bill length look like?\n\n1.  As flipper length increases, so does bill length\n\n2.  There seems to be **three clusters**\n\n    Recall we have three species!\n\n::: callout-note\n## Scientific hypothesis\n\nThe relationship between flipper length and bill length differ by species.\n:::\n\n## **Factor and color**\n\nFactors are used for categorical variables, variables that have a fixed and known set of possible values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n:::\n:::\n\n\nWe have used the x-axis to represent the flipper length and the y-axis to represent the bill length. How can we represent another variable on a canvas? The z-axis?\n\n::: callout-tip\nWe can use different colors for different categories!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, color = species)\n) +\n        geom_point() + \n        geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nHooray!\n\nWhen a categorical variable (factor) is mapped to an aesthetic, ggplot will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as **scaling**.\n\nInstead of only one regression line, now we get three, each with corresponding color. The legend has been automatically updated too.\n\n## **Changing shapes**\n\nIt's generally not a good idea to represent information using only colors on a plot, as people perceive colors differently due to color blindness or other color vision differences. Therefore, in addition to color, we can also map `species` to the `shape` aesthetic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point() + \n        geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## **Improving the labels and the theme**\n\nUse the `labs()` function in a new layer. The default canvas theme is not the best, and we'd better replace it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point() + \n        geom_smooth(method = \"lm\") + \n        labs(\n                title = \"Flipper and bill length\",\n                subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n                x = \"Flipper length (mm)\",\n                y = \"Bill length (mm)\",\n                color = \"Penguin species\",\n                shape = \"Penguin species\"\n        ) + \n        theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n::: callout-caution\n## Customize it\n\nType `theme_` and wait for auto-completion suggestions. Pick your favorite theme.\n:::\n\n## **More customization**\n\nUse `scale_color_manual()` to specify colors manually. The values will be matched in order of the factor `species`, which is ordered alphabetically.\n\n::: callout-note\n## Recall\\...\n\nWhen a categorical variable (factor) is mapped to an aesthetic, ggplot will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as **scaling**.\n:::\n\n![](penguins.png){fig-align=\"center\" width=\"421\"}\n\n`geom_point(size = 3, alpha = 0.8)` adjusts the size and the transparency of points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point(size = 3, alpha = 0.8) + \n        geom_smooth(method = \"lm\") + \n        labs(\n                title = \"Flipper and bill length\",\n                subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n                x = \"Flipper length (mm)\",\n                y = \"Bill length (mm)\",\n                color = \"Penguin species\",\n                shape = \"Penguin species\"\n        ) + \n        theme_bw() + \n        scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n::: callout-caution\n## Customize it\n\nPick your favorite colors. You may use the name with a suffix number or use the hex of the color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"darkorange\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"darkorange\"\n```\n:::\n\n```{.r .cell-code}\n\"darkorange1\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"darkorange1\"\n```\n:::\n\n```{.r .cell-code}\n\"darkorange2\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"darkorange2\"\n```\n:::\n\n```{.r .cell-code}\n\"darkorange3\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"darkorange3\"\n```\n:::\n\n```{.r .cell-code}\n\"darkorange4\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"darkorange4\"\n```\n:::\n\n```{.r .cell-code}\n\"#ff4e02\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#ff4e02\"\n```\n:::\n:::\n\n:::\n\n## **Saving your plot!**\n\nFirst, save your painting in a variable called `gg`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg <- ggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point(size = 3, alpha = 0.8) + \n        geom_smooth(method = \"lm\") + \n        labs(\n                title = \"Flipper and bill length\",\n                subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n                x = \"Flipper length (mm)\",\n                y = \"Bill length (mm)\",\n                color = \"Penguin species\",\n                shape = \"Penguin species\"\n        ) + \n        theme_bw() + \n        scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n        filename = \"my_ggplot.png\",\n        plot = gg\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n:::\n\n\n## **Some other plots**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"GGally\")\nlibrary(GGally)\npenguins %>%\n  select(species, body_mass_g, ends_with(\"_mm\")) %>% \n  GGally::ggpairs(aes(color = species)) +\n  scale_colour_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) + \n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n-   [Example graphs using the penguins data](https://allisonhorst.github.io/palmerpenguins/articles/examples.html)\n\n-   [The R Graph Gallery](https://r-graph-gallery.com/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}