{
  "hash": "aa24b11f128a31032275d9a6cf85282a",
  "result": {
    "markdown": "---\ntitle: \"Intro to R\"\nformat: \n  html:\n    toc: true\n    css: styles.css\n    toc-location: left\neditor: visual\ncategories: [R]\n---\n\n\n## Preparation\n\n### Installing R and RStudio\n\n[Following step 1 and 2 here to download them](https://posit.co/download/rstudio-desktop/)\n\n::: callout-note\nRecommended R version: **4.3.0+**\n:::\n\nR is a powerful tool for analyzing and visualizing data. Specifically, it is a language and environment for statistical computing and graphics. As an R user you will need to learn to understand the language R uses to execute commands. And that is what we will hopefully help you with today.\n\nRStudio is an open source R integrated development environment for interfacing with R.It is useful for:\n\n-   Writing scripts for specific analyses\n-   Creating markdown documents\n-   Version control via GitHub\n-   Organizing and sharing analyses via projects\n\n### Checking whether RStudio is using the correct version or R\n\n> Tools -\\> Global Options... -\\> General\n\n![](RStudio1.png){width=\"459\"}\n\n### Configuring RStudio\n\n> Tools -\\> Global Options... -\\> Pane Layout\n\n![](RStudio2.png){width=\"459\"}\n\n### Navigating RStudio\n\nThere are two main ways one can work within RStudio.\n\n1.  Test and play within the interactive R console then copy code into a `.R` file to run later.\n\n-   This works well when doing small tests and initially starting off.\n-   It quickly becomes laborious\n-   Harder to keep track of what you've done\n\nIn the console window you will see a `>` symbol, which is an **interactive command prompt**.\n\n-   It operates on the same idea of a \"Read, evaluate, print loop\": you type in commands, R tries to execute them, and then returns a result.\n-   This is similar to what you'd see in a terminal or command prompt.\n\n2.  Start writing in an .R file and use RStudio's short cut keys for the Run command to push the current line, selected lines or modified lines to the interactive R console.\n\n-   This is a great way to start; all your code is saved for later.\n-   Can easily share code this way.\n\n## Working in Base R\n\n### Using R as a calculator\n\nLet's start programming by getting R to do some arithmetic for us. I am going to do this in the editor window.\n\n::: callout-tip\nHovering over the code chunk and clicking `Copy to Clipboard`, you can copy the code and have a try yourself!\n:::\n\nThere are a few different ways to run commands or 'chunks' of code from the editor window, depending on the OS you are using:\n\n-   Click run (all systems)\n-   `Ctrl + Enter` (Win, Linux)\n-   `Cmd + Enter` (Mac OS)\n\n::: callout-tip\nYou can run multiple lines of code at once. You can run lines without highlighting, code will run on line with cursor\n:::\n\nSo let's start by running some code to do some addition:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n53 + 23 # [Ctrl + Enter]\n```\n:::\n\n\nRemember to actually run this we hit ctrl or cmd + enter, or click the run button.\n\nThe text after each line of code is called a \"comment\". Anything that follows after the hash (or octothorpe) symbol \\# is ignored by R when it executes code.\n\nYou'll see that the line we've just run pops up in the console, along with the output from the command we've just given R. If you run an incomplete command, R will wait for you to complete it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + # [Ctrl + Enter]\n```\n:::\n\n\nNote that the `>` in the console window is now a + indicating that R is waiting for the command to be completed. You can exit commands by pressing escape within the console window.\n\nWhen using R as a calculator, the order of operations is the same as you would have learned back in school. From highest to lowest precedence:\n\n-   Parentheses: ( )\n-   Exponents: \\^\n-   Divide: /\n-   Multiply: \\*\n-   Add: +\n-   Subtract: -\n\nSo for example we can try:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n:::\n\n\nversus\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(3 + 5) * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n:::\n\n\n::: callout-note\nR will ignore spaces between + and - , etc.\n:::\n\n### Mathematical functions\n\nR has many built in mathematical functions. To call a function, we simply type its name, followed by open and closing parentheses. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(1)  # natural logarithm\nlog10(10) # base-10 logarithm\nexp(0.5) # exponent\n```\n:::\n\n\n::: callout-note\n## Note on functions\n\nWe have just used our first built-in R functions, i.e., `log()`, `log10()`, and `exp()`. One of the great benefits of R is the shear diversity of functions at our disposal. No matter how complex or simple the function, they operate in the same way:\n\n1.  Call the name of the function, e.g., `log`\n2.  Provide required **arguments** in parentheses, e.g., `log(1)`\n:::\n\nThese mathematical functions are relatively simple and only have one or two arguments. For instance, the `log()` function take two arguments: `x` and `base`. So, when we call\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nWe are actually calling:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x = 1, base = exp(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nHere, `x` represents the number (or numbers) we want to take the logarithm of, and base is the base to be used for the log, which by default is `exp(1)`. Note that, with the base argument, we are calling a function within a function!\n\n::: callout-tip\nForget arguments? Use the help document:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?log\n```\n:::\n\n:::\n\n### Variables and assignment\n\nWe can store values in variables using the assignment operator `<-`, which is the less than sign followed by a minus like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1/40\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.025\n```\n:::\n:::\n\n\n::: callout-note\nWill see that x has been loaded in to the environment. ![](environment.png){width=\"405\"}\n:::\n\n::: callout-tip\n`Alt + -` gives `<-` in Windows\n:::\n\nAnd we can now perform calculations using x in place of our original number. For example, take the natural log:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x)\n```\n:::\n\n\nWe can also reassign variables that we have created. Let make x have a value of 100:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 100\n```\n:::\n\n\nWe can also update the assigned value by including the variable we want to update. E.g.:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- x + 1\n```\n:::\n\n\nand even:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- x * 2\n```\n:::\n\n\nVariable names can contain letters, numbers, underscores and periods. They cannot start with a number nor contain spaces at all. Different people use different conventions for long variable names, these include:\n\n-   periods.between.words\n-   underscores_between_words\n-   camelCaseToSeparateWords\n\n::: callout-important\nI prefer `underscores_between_words`. (reasons will be clear)\n:::\n\n> Which of the following are valid R variable names?\n>\n> 1.  min_height\n>\n> 2.  max.height\n>\n> 3.  \\_age\n>\n> 4.  .mass\n>\n> 5.  MaxLength\n>\n> 6.  min-length\n>\n> 7.  2widths\n>\n> 8.  celsius2kelvin\n\n::: {.callout-caution collapse=\"true\"}\n## Answer\n\n1, 2, 4, 5, 8\n\n-   You can't start a variable name with an `_` or a number.\n-   \".mass\" creates a variable, but it is a hidden variable\n-   R sees \"min-length\" as a mathematical operation, rather than a name\n-   But I almost only use 1 to save my sanity.\n:::\n\n> What will be the value of each variable (mass and age) after each statement in the following:\n>\n> ``` r\n> mass <- 47.5\n>\n> age <- 122\n>\n> mass <- mass * 2.3\n>\n> age <- age â€“ 20\n> ```\n\n::: callout-important\nYou can overwrite variables!\n:::\n\n### Vectorization\n\nR is vectorized: variables and functions can have vectors as values. A vector in R describes a set of values in a certain order of the same data type. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nProduces a vector of numbers. And we can perform mathematical functions on this vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2^(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  8 16 32\n```\n:::\n:::\n\n\nNotice that what R has done here is raise 2 to the power of each number in the vector.\n\nWe can also perform arithmetic on multiple vectors, for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:4\ny <-  5:8\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6  8 10 12\n```\n:::\n:::\n\n\nThe vectorized nature of R is an incredibly useful feature that can often save you lots of time.\n\n### Brief note on data types\n\nThere are 4 main of data types:\n\n1.  double\n\n2.  integer\n\n3.  logical(`TRUE` and `FALSE`)\n\n4.  character\n\nSome operations can only be performed on certain types of data. For example, mathematical functions typically need to be done one types double or integer. We can use the `typeof` function to identify a data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(x)\n```\n:::\n\n\nOr for a categorical vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(c(\"red\", \"organge\", \"blue\"))\n```\n:::\n\n\n::: callout-note\n`c()` combines its arguments to form a vector.\n:::\n\n::: callout-warning\nIf you combine data of different types in a vector, R will \\*\\*coerce\\*\\* them to be of the same type. It is important to keep words/characters and numbers separate!\n:::\n\n### Combining vectors into a dataframe\n\nWe can also combine vectors into a dataframe. Dataframes are extremely useful, and are typically how your data would be stored and worked with in R. Key to note is that each vector must be the same length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats <- data.frame(coat = c(\"calico\", \"black\", \"tabby\"),\n                    weight = c(2.1, 5.0, 3.2),\n                    likes_string = c(1, 0, 1))\ncats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    coat weight likes_string\n1 calico    2.1            1\n2  black    5.0            0\n3  tabby    3.2            1\n```\n:::\n:::\n\n\n## Tidyverse\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}