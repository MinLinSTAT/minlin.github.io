---
title: "Intro to R"
format: 
  html:
    toc: true
    html-math-method: katex
    css: styles.css
    toc-location: left
editor: visual
---

## Preparation

### Installing R and RStudio

[Following step 1 and 2 here to download them](https://posit.co/download/rstudio-desktop/)

::: callout-note
Recommended R version: **4.3.0+**
:::

R is a powerful tool for analyzing and visualizing data. Specifically, it is a language and environment for statistical computing and graphics. As an R user you will need to learn to understand the language R uses to execute commands. And that is what we will hopefully help you with today.

RStudio is an open source R integrated development environment for interfacing with R.It is useful for:

-   Writing scripts for specific analyses
-   Creating markdown documents
-   Version control via GitHub
-   Organizing and sharing analyses via projects

### Checking whether RStudio is using the correct version or R

> Tools -\> Global Options... -\> General

![](RStudio1.png){width="590"}

## Configuring RStudio

> Tools -\> Global Options... -\> Pane Layout

![](RStudio2.png){width="607"}

> Tools -\> Global Options... -\> Appearance

![](Appearance.png)

## Navigating RStudio

![](RStudio3.png)

-   Left: source panel (where we can write scripts)

-   Top right: console window

-   Bottom right: everything else

There are two main ways one can work within RStudio.

1.  Test and play within the interactive R console then copy code into a `.R` file to run later.

-   This works well when doing small tests and initially starting off.
-   It quickly becomes laborious
-   Harder to keep track of what you've done

In the console window you will see a `>` symbol, which is an **interactive command prompt**.

-   It operates on the same idea of a "Read, evaluate, print loop": you type in commands, R tries to execute them, and then returns a result.
-   This is similar to what you'd see in a terminal or command prompt.

2.  Start writing in an .R file and use RStudio's short cut keys for the Run command to push the current line, selected lines or modified lines to the interactive R console.

-   This is a great way to start; all your code is saved for later.
-   Can easily share code this way.

::: callout-tip
Some shortcuts I use every single time

-   `Ctrl + 1`: Move Focus to Source
-   `Ctrl + 2`: Move Focus to Console

> More: Tools -\> Keyboard Shortcuts Help
:::

## Using R as a calculator

Let's start programming by getting R to do some arithmetic for us. I am going to do this in the editor window.

::: callout-tip
Hovering over the code chunk and clicking `Copy to Clipboard`, you can copy the code and have a try yourself!
:::

There are a few different ways to run commands or 'chunks' of code from the editor window, depending on the OS you are using.

Run and move cursor down:

-   Click run (all systems)
-   `Ctrl + Enter` (Win, Linux)
-   `Cmd + Enter` (Mac OS)
-   `Alt + Enter` (Win, Linux)

::: callout-tip
You can run multiple lines of code at once. You can run lines without highlighting, code will run on line with cursor
:::

Run and don't move cursor:

-   `Alt + Enter` (Win, Linux)

So let's start by running some code to do some addition:

```{r, eval = FALSE}
53 + 23 # [Ctrl + Enter]
```

Remember to actually run this we hit ctrl or cmd + enter, or click the run button.

The text after each line of code is called a "comment". Anything that follows after the hash (or octothorpe) symbol \# is ignored by R when it executes code.

You'll see that the line we've just run pops up in the console, along with the output from the command we've just given R. If you run an incomplete command, R will wait for you to complete it:

```{r, eval = FALSE}
1 + # [Ctrl + Enter]
```

Note that the `>` in the console window is now a + indicating that R is waiting for the command to be completed. You can exit commands by pressing escape within the console window.

When using R as a calculator, the order of operations is the same as you would have learned back in school. From highest to lowest precedence:

-   Parentheses: ( )
-   Exponents: \^
-   Divide: /
-   Multiply: \*
-   Add: +
-   Subtract: -

So for example we can try:

```{r}
3 + 5 * 2
```

versus

```{r}
(3 + 5) * 2
```

::: callout-note
R will ignore spaces between + and - , etc.
:::

## Mathematical functions

R has many built in mathematical functions. To call a function, we simply type its name, followed by open and closing parentheses. For example:

```{r, eval = FALSE}
log(1)  # natural logarithm
log10(10) # base-10 logarithm
exp(0.5) # exponent
```

::: callout-note
## Note on functions

We have just used our first built-in R functions, i.e., `log()`, `log10()`, and `exp()`. One of the great benefits of R is the shear diversity of functions at our disposal. No matter how complex or simple the function, they operate in the same way:

1.  Call the name of the function, e.g., `log`
2.  Provide required **arguments** in parentheses, e.g., `log(1)`
:::

These mathematical functions are relatively simple and only have one or two arguments. For instance, the `log()` function take two arguments: `x` and `base`. So, when we call

```{r}
log(1)
```

We are actually calling:

```{r}
log(x = 1, base = exp(1))
```

Here, `x` represents the number (or numbers) we want to take the logarithm of, and base is the base to be used for the log, which by default is `exp(1)`. Note that, with the base argument, we are calling a function within a function!

::: callout-tip
Forget arguments? Use the help document:

```{r, eval = FALSE}
?log
```
:::

## Variables and assignment

We can store values in variables using the assignment operator `<-`, which is the less than sign followed by a minus like this:

```{r}
x <- 1/40
x
```

::: callout-note
Will see that x has been loaded in to the environment. ![](environment.png){width="405"}
:::

::: callout-tip
`Alt + -` gives `<-` in Windows
:::

::: callout-warning
You may see someone use `=` instead of `<-`:

```{r}
x = 1/40
x
```

But it's a bad habit! Don't use `=` to assign a variable ever.
:::

And we can now perform calculations using x in place of our original number. For example, take the natural log:

```{r, eval=FALSE}
log(x)
```

We can also reassign variables that we have created. Let make x have a value of 100:

```{r, eval=FALSE}
x <- 100
```

We can also update the assigned value by including the variable we want to update. E.g.:

```{r, eval=FALSE}
x <- x + 1
```

and even:

```{r, eval=FALSE}
y <- x * 2
```

Variable names can contain letters, numbers, underscores and periods. They cannot start with a number nor contain spaces at all. Different people use different conventions for long variable names, these include:

-   periods.between.words
-   underscores_between_words
-   camelCaseToSeparateWords

::: callout-important
I prefer `underscores_between_words`. (reasons will be clear)
:::

> Which of the following are valid R variable names?
>
> 1.  min_height
>
> 2.  max.height
>
> 3.  \_age
>
> 4.  .mass
>
> 5.  MaxLength
>
> 6.  min-length
>
> 7.  2widths
>
> 8.  celsius2kelvin

::: {.callout-caution collapse="true"}
## Answer

1, 2, 4, 5, 8

-   You can't start a variable name with an `_` or a number.
-   ".mass" creates a variable, but it is a hidden variable
-   R sees "min-length" as a mathematical operation, rather than a name
-   But I almost only use 1 to save my sanity.
:::

> What will be the value of each variable (mass and age) after each statement in the following:
>
> ``` r
> mass <- 47.5
>
> age <- 122
>
> mass <- mass * 2.3
>
> age <- age â€“ 20
> ```

::: callout-important
You can overwrite variables!
:::

## Vectorization

R is vectorized: variables and functions can have vectors as values. A vector in R describes a set of values in a certain order of the same data type. For example:

```{r}
1:5 
```

Produces a vector of numbers. And we can perform mathematical functions on this vector:

```{r}
2^(1:5)
```

Notice that what R has done here is raise 2 to the power of each number in the vector.

We can also perform arithmetic on multiple vectors, for example:

```{r}
x <- 1:4
y <- 5:8
x + y
```

The vectorized nature of R is an incredibly useful feature that can often save you lots of time.

## Brief note on data types

There are 4 main of data types:

1.  double

2.  integer

3.  logical(`TRUE` and `FALSE`)

4.  character

Some operations can only be performed on certain types of data. For example, mathematical functions typically need to be done one types double or integer. We can use the `typeof` function to identify a data type:

```{r, eval = FALSE}
typeof(x)
```

Or for a categorical vector:

```{r, eval = FALSE}
typeof(c("red", "organge", "blue"))

```

::: callout-note
`c()` combines its arguments to form a vector.
:::

::: callout-warning
If you combine data of different types in a vector, R will \*\*coerce\*\* them to be of the same type. It is important to keep words/characters and numbers separate!
:::

## Combining vectors into a dataframe

We can also combine vectors into a dataframe. Dataframes are extremely useful, and are typically how your data would be stored and worked with in R. Key to note is that each vector must be the same length.

```{r}
cats <- data.frame(coat = c("calico", "black", "tabby"),
                    weight = c(2.1, 5.0, 3.2),
                    likes_string = c(1, 0, 1))
cats

```

## Experiment

Except built-in functions, R support external packages. When downloading R, it ships with some packages. Look up the whole list by:

```{r, eval = FALSE}
library() 
```

To download new packages, do

```{r, eval = FALSE}
install.packages("name-of-the-package")
```

To make a package at your disposal,

```{r, message = FALSE}
library(MASS)
```

We will play with a data set called `Boston` in the MASS package. Use

```{r, eval = FALSE}
?Boston
```

```{r}
dim(Boston) # dimension (506 rows and 14 columns)
head(Boston) # see the first 6 rows 
colnames(Boston) # column names
boxplot(Boston$medv) # boxplot of median house price
boxplot(Boston$lstat) # percent of households with low socioeconomic status
cor(Boston$medv, Boston$lstat) # Pearson correlation
my_model <- lm(medv ~ lstat, data = Boston)
summary(my_model)
plot(my_model) # diagnostic plots
```
