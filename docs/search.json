[
  {
    "objectID": "posts/ggplot/index.html",
    "href": "posts/ggplot/index.html",
    "title": "R Visualization",
    "section": "",
    "text": "Make sure you have R version 4.3.0+ and RStudio installed.\n\nversion$version.string\n\n[1] \"R version 4.3.1 (2023-06-16 ucrt)\"\n\n\nInstall tidyverse and palmerpenguins if you haven’t done so:\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\n\n\n\n\n\n\n\n\n\n\n\nYou only need to install a package once, but you need to load it every time you start a new session. Load tidyverse and palmerpenguins:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins) # will use the data set\n\nWarning: package 'palmerpenguins' was built under R version 4.3.2"
  },
  {
    "objectID": "posts/ggplot/index.html#preparation",
    "href": "posts/ggplot/index.html#preparation",
    "title": "R Visualization",
    "section": "Preparation",
    "text": "Preparation\nMake sure you have R version 4.3.0+ and RStudio installed.\n\nversion$version.string\n\n[1] \"R version 4.3.1 (2023-06-16 ucrt)\"\n\n\nInstall tidyverse and palmerpenguins if you haven’t done so:\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\n\n\n\n\n\n\n\n\n\n\n\nYou only need to install a package once, but you need to load it every time you start a new session. Load tidyverse and palmerpenguins:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins) # will use the data set\n\nWarning: package 'palmerpenguins' was built under R version 4.3.2"
  },
  {
    "objectID": "posts/ggplot/index.html#data-exploration-loop",
    "href": "posts/ggplot/index.html#data-exploration-loop",
    "title": "R Visualization",
    "section": "Data exploration loop",
    "text": "Data exploration loop\n\n\n\n\n\nOur ultimate goal in this workshop is to recreate the following visualization displaying the relationship between flipper lengths and bill lengths of penguins, taking into consideration the species of the penguin."
  },
  {
    "objectID": "posts/ggplot/index.html#the-penguins",
    "href": "posts/ggplot/index.html#the-penguins",
    "title": "R Visualization",
    "section": "The penguins",
    "text": "The penguins\nThe palmerpenguins data contains size measurements for three penguin species observed on three islands in the Palmer Archipelago, Antarctica.\n\n\n\n\n\n\n\n\n\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nLet’s glimpse the columns:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nAmong the variables in penguins are:\n\nspecies: a factor denoting penguin species (Adelie, Chinstrap, or Gentoo)\nbill_length_mm: a number denoting bill length (millimeters)\nflipper_length_mm: an integer denoting flipper length (millimeters)\n\n\n\n\n\n\nTo learn more about penguins, open its help page by running ?penguins."
  },
  {
    "objectID": "posts/ggplot/index.html#creating-a-ggplot",
    "href": "posts/ggplot/index.html#creating-a-ggplot",
    "title": "R Visualization",
    "section": "Creating a ggplot",
    "text": "Creating a ggplot\nggplot2 is a package in the tidyverse family. The “gg” in the name means “grammar of graphics” – a scheme for data visualization which breaks up graphs into semantic components. Since we have loaded tidyverse, we don’t need to load ggplot2 again.\nLet’s begin a plot with the function ggplot(), defining a plot object that we then add layers to. The first argument of ggplot() is the dataset to use in the graph and so ggplot(data = penguins) creates an empty graph that is primed to display the penguin data. We create an empty canvas that we’ll paint the remaining layers of the plot onto.\n\nggplot(data = penguins)\n\n\n\n\nNext, we need to tell ggplot() how the information from our data will be visuallyv represented. The mapping argument of the ggplot() function defines how variables in the dataset are mapped to visual properties (aesthetics) of the plot.\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm)\n)\n\n\n\n\nBut where are the penguins??? We have not yet articulated, in our code, how to represent the observations from our data frame on our plot.\nTo do so, we need to define a geom: the geometrical object that a plot uses to represent data. Use the symbol + to connect the canvas ggplot() and the geometrical object geom_point(). We get a scatterplot:\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm)\n) + geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "posts/ggplot/index.html#adding-regression-lines",
    "href": "posts/ggplot/index.html#adding-regression-lines",
    "title": "R Visualization",
    "section": "Adding regression lines",
    "text": "Adding regression lines\nUse geom_smooth() to add a layer of smooth curve. Specify method = \"lm\" to fit a linear model.\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm)\n) + geom_point() + \n        geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nWhat does the relationship between flipper length and bill length look like?\n\nAs flipper length increases, so does bill length\nThere seems to be three clusters\nRecall we have three species!\n\n\n\n\n\n\n\nScientific hypothesis\n\n\n\nThe relationship between flipper length and bill length differ by species."
  },
  {
    "objectID": "posts/ggplot/index.html#factor-and-color",
    "href": "posts/ggplot/index.html#factor-and-color",
    "title": "R Visualization",
    "section": "Factor and color",
    "text": "Factor and color\nFactors are used for categorical variables, variables that have a fixed and known set of possible values.\n\nclass(penguins$species)\n\n[1] \"factor\"\n\nlevels(penguins$species)\n\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n\n\nWe have used the x-axis to represent the flipper length and the y-axis to represent the bill length. How can we represent another variable on a canvas? The z-axis?\n\n\n\n\n\n\nTip\n\n\n\nWe can use different colors for different categories!\n\n\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, color = species)\n) +\n        geom_point() + \n        geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nHooray!\nWhen a categorical variable (factor) is mapped to an aesthetic, ggplot will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as scaling.\nInstead of only one regression line, now we get three, each with corresponding color. The legend has been automatically updated too."
  },
  {
    "objectID": "posts/ggplot/index.html#changing-shapes",
    "href": "posts/ggplot/index.html#changing-shapes",
    "title": "R Visualization",
    "section": "Changing shapes",
    "text": "Changing shapes\nIt’s generally not a good idea to represent information using only colors on a plot, as people perceive colors differently due to color blindness or other color vision differences. Therefore, in addition to color, we can also map species to the shape aesthetic.\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point() + \n        geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "posts/ggplot/index.html#improving-the-labels-and-the-theme",
    "href": "posts/ggplot/index.html#improving-the-labels-and-the-theme",
    "title": "R Visualization",
    "section": "Improving the labels and the theme",
    "text": "Improving the labels and the theme\nUse the labs() function in a new layer. The default canvas theme is not the best, and we’d better replace it.\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point() + \n        geom_smooth(method = \"lm\") + \n        labs(\n                title = \"Flipper and bill length\",\n                subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n                x = \"Flipper length (mm)\",\n                y = \"Bill length (mm)\",\n                color = \"Penguin species\",\n                shape = \"Penguin species\"\n        ) + \n        theme_bw()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCustomize it\n\n\n\nType theme_ and wait for auto-completion suggestions. Pick your favorite theme."
  },
  {
    "objectID": "posts/ggplot/index.html#more-customization",
    "href": "posts/ggplot/index.html#more-customization",
    "title": "R Visualization",
    "section": "More customization",
    "text": "More customization\nUse scale_color_manual() to specify colors manually. The values will be matched in order of the factor species, which is ordered alphabetically.\n\n\n\n\n\n\nRecall...\n\n\n\nWhen a categorical variable (factor) is mapped to an aesthetic, ggplot will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as scaling.\n\n\n\n\n\n\n\ngeom_point(size = 3, alpha = 0.8) adjusts the size and the transparency of points.\n\nggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point(size = 3, alpha = 0.8) + \n        geom_smooth(method = \"lm\") + \n        labs(\n                title = \"Flipper and bill length\",\n                subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n                x = \"Flipper length (mm)\",\n                y = \"Bill length (mm)\",\n                color = \"Penguin species\",\n                shape = \"Penguin species\"\n        ) + \n        theme_bw() + \n        scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCustomize it\n\n\n\nPick your favorite colors. You may use the name with a suffix number or use the hex of the color.\n\n\"darkorange\"\n\"darkorange1\"\n\"darkorange2\"\n\"darkorange3\"\n\"darkorange4\"\n\"#ff4e02\""
  },
  {
    "objectID": "posts/ggplot/index.html#saving-your-plot",
    "href": "posts/ggplot/index.html#saving-your-plot",
    "title": "R Visualization",
    "section": "Saving your plot!",
    "text": "Saving your plot!\nFirst, save your painting in a variable called gg:\n\ngg &lt;- ggplot(\n        data = penguins,\n        mapping = aes(x = flipper_length_mm, y = bill_length_mm, \n                      color = species, shape = species)\n) +\n        geom_point(size = 3, alpha = 0.8) + \n        geom_smooth(method = \"lm\") + \n        labs(\n                title = \"Flipper and bill length\",\n                subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n                x = \"Flipper length (mm)\",\n                y = \"Bill length (mm)\",\n                color = \"Penguin species\",\n                shape = \"Penguin species\"\n        ) + \n        theme_bw() + \n        scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n\n\nggsave(\n        filename = \"my_ggplot.png\",\n        plot = gg\n)\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "misc.html",
    "href": "misc.html",
    "title": "Untitled",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "misc.html#quarto",
    "href": "misc.html#quarto",
    "title": "Untitled",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "misc.html#running-code",
    "href": "misc.html#running-code",
    "title": "Untitled",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Posts",
    "section": "",
    "text": "Intro to R\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nR Visualization\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Min Lin's Homepage",
    "section": "",
    "text": "My skill: sleep everywhere, even in a restaurant."
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html",
    "title": "Intro to R",
    "section": "",
    "text": "Special thanks to Dr. Timothy E. Moore for most contents of this tutorial!"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#preparation",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#preparation",
    "title": "Intro to R",
    "section": "Preparation",
    "text": "Preparation\n\nInstalling R and RStudio\nFollowing step 1 and 2 here to download them\n\n\n\n\n\n\nNote\n\n\n\nRecommended R version: 4.3.0+\n\n\nR is a powerful tool for analyzing and visualizing data. Specifically, it is a language and environment for statistical computing and graphics. As an R user you will need to learn to understand the language R uses to execute commands. And that is what we will hopefully help you with today.\nRStudio is an open source R integrated development environment for interfacing with R.It is useful for:\n\nWriting scripts for specific analyses\nCreating markdown documents\nVersion control via GitHub\nOrganizing and sharing analyses via projects\n\n\n\nChecking whether RStudio is using the correct version or R\n\nTools -&gt; Global Options… -&gt; General"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#configuring-rstudio",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#configuring-rstudio",
    "title": "Intro to R",
    "section": "Configuring RStudio",
    "text": "Configuring RStudio\n\nTools -&gt; Global Options… -&gt; Pane Layout\n\n\n\nTools -&gt; Global Options… -&gt; Appearance"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#navigating-rstudio",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#navigating-rstudio",
    "title": "Intro to R",
    "section": "Navigating RStudio",
    "text": "Navigating RStudio\n\n\nLeft: source panel (where we can write scripts)\nTop right: console window\nBottom right: everything else\n\nThere are two main ways one can work within RStudio.\n\nTest and play within the interactive R console then copy code into a .R file to run later.\n\n\nThis works well when doing small tests and initially starting off.\nIt quickly becomes laborious\nHarder to keep track of what you’ve done\n\nIn the console window you will see a &gt; symbol, which is an interactive command prompt.\n\nIt operates on the same idea of a “Read, evaluate, print loop”: you type in commands, R tries to execute them, and then returns a result.\nThis is similar to what you’d see in a terminal or command prompt.\n\n\nStart writing in an .R file and use RStudio’s short cut keys for the Run command to push the current line, selected lines or modified lines to the interactive R console.\n\n\nThis is a great way to start; all your code is saved for later.\nCan easily share code this way.\n\n\n\n\n\n\n\nTip\n\n\n\nSome shortcuts I use every single time\n\nCtrl + 1: Move Focus to Source\nCtrl + 2: Move Focus to Console\n\n\nMore: Tools -&gt; Keyboard Shortcuts Help"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#using-r-as-a-calculator",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#using-r-as-a-calculator",
    "title": "Intro to R",
    "section": "Using R as a calculator",
    "text": "Using R as a calculator\nLet’s start programming by getting R to do some arithmetic for us. I am going to do this in the editor window.\n\n\n\n\n\n\nTip\n\n\n\nHovering over the code chunk and clicking Copy to Clipboard, you can copy the code and have a try yourself!\n\n\nThere are a few different ways to run commands or ‘chunks’ of code from the editor window, depending on the OS you are using.\nRun and move cursor down:\n\nClick run (all systems)\nCtrl + Enter (Win, Linux)\nCmd + Enter (Mac OS)\nAlt + Enter (Win, Linux)\n\n\n\n\n\n\n\nTip\n\n\n\nYou can run multiple lines of code at once. You can run lines without highlighting, code will run on line with cursor\n\n\nRun and don’t move cursor:\n\nAlt + Enter (Win, Linux)\n\nSo let’s start by running some code to do some addition:\n\n53 + 23 # [Ctrl + Enter]\n\nRemember to actually run this we hit ctrl or cmd + enter, or click the run button.\nThe text after each line of code is called a “comment”. Anything that follows after the hash (or octothorpe) symbol # is ignored by R when it executes code.\nYou’ll see that the line we’ve just run pops up in the console, along with the output from the command we’ve just given R. If you run an incomplete command, R will wait for you to complete it:\n\n1 + # [Ctrl + Enter]\n\nNote that the &gt; in the console window is now a + indicating that R is waiting for the command to be completed. You can exit commands by pressing escape within the console window.\nWhen using R as a calculator, the order of operations is the same as you would have learned back in school. From highest to lowest precedence:\n\nParentheses: ( )\nExponents: ^\nDivide: /\nMultiply: *\nAdd: +\nSubtract: -\n\nSo for example we can try:\n\n3 + 5 * 2\n\n[1] 13\n\n\nversus\n\n(3 + 5) * 2\n\n[1] 16\n\n\n\n\n\n\n\n\nNote\n\n\n\nR will ignore spaces between + and - , etc."
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#mathematical-functions",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#mathematical-functions",
    "title": "Intro to R",
    "section": "Mathematical functions",
    "text": "Mathematical functions\nR has many built in mathematical functions. To call a function, we simply type its name, followed by open and closing parentheses. For example:\n\nlog(1)  # natural logarithm\nlog10(10) # base-10 logarithm\nexp(0.5) # exponent\n\n\n\n\n\n\n\nNote on functions\n\n\n\nWe have just used our first built-in R functions, i.e., log(), log10(), and exp(). One of the great benefits of R is the shear diversity of functions at our disposal. No matter how complex or simple the function, they operate in the same way:\n\nCall the name of the function, e.g., log\nProvide required arguments in parentheses, e.g., log(1)\n\n\n\nThese mathematical functions are relatively simple and only have one or two arguments. For instance, the log() function take two arguments: x and base. So, when we call\n\nlog(1)\n\n[1] 0\n\n\nWe are actually calling:\n\nlog(x = 1, base = exp(1))\n\n[1] 0\n\n\nHere, x represents the number (or numbers) we want to take the logarithm of, and base is the base to be used for the log, which by default is exp(1). Note that, with the base argument, we are calling a function within a function!\n\n\n\n\n\n\nTip\n\n\n\nForget arguments? Use the help document:\n\n?log"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#variables-and-assignment",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#variables-and-assignment",
    "title": "Intro to R",
    "section": "Variables and assignment",
    "text": "Variables and assignment\nWe can store values in variables using the assignment operator &lt;-, which is the less than sign followed by a minus like this:\n\nx &lt;- 1/40\nx\n\n[1] 0.025\n\n\n\n\n\n\n\n\nNote\n\n\n\nWill see that x has been loaded in to the environment. \n\n\n\n\n\n\n\n\nTip\n\n\n\nAlt + - gives &lt;- in Windows\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou may see someone use = instead of &lt;-:\n\nx = 1/40\nx\n\n[1] 0.025\n\n\nBut it’s a bad habit! Don’t use = to assign a variable ever.\n\n\nAnd we can now perform calculations using x in place of our original number. For example, take the natural log:\n\nlog(x)\n\nWe can also reassign variables that we have created. Let make x have a value of 100:\n\nx &lt;- 100\n\nWe can also update the assigned value by including the variable we want to update. E.g.:\n\nx &lt;- x + 1\n\nand even:\n\ny &lt;- x * 2\n\nVariable names can contain letters, numbers, underscores and periods. They cannot start with a number nor contain spaces at all. Different people use different conventions for long variable names, these include:\n\nperiods.between.words\nunderscores_between_words\ncamelCaseToSeparateWords\n\n\n\n\n\n\n\nImportant\n\n\n\nI prefer underscores_between_words. (reasons will be clear)\n\n\n\nWhich of the following are valid R variable names?\n\nmin_height\nmax.height\n_age\n.mass\nMaxLength\nmin-length\n2widths\ncelsius2kelvin\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n1, 2, 4, 5, 8\n\nYou can’t start a variable name with an _ or a number.\n“.mass” creates a variable, but it is a hidden variable\nR sees “min-length” as a mathematical operation, rather than a name\nBut I almost only use 1 to save my sanity.\n\n\n\n\n\nWhat will be the value of each variable (mass and age) after each statement in the following:\nmass &lt;- 47.5\n\nage &lt;- 122\n\nmass &lt;- mass * 2.3\n\nage &lt;- age – 20\n\n\n\n\n\n\n\nImportant\n\n\n\nYou can overwrite variables!"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#vectorization",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#vectorization",
    "title": "Intro to R",
    "section": "Vectorization",
    "text": "Vectorization\nR is vectorized: variables and functions can have vectors as values. A vector in R describes a set of values in a certain order of the same data type. For example:\n\n1:5 \n\n[1] 1 2 3 4 5\n\n\nProduces a vector of numbers. And we can perform mathematical functions on this vector:\n\n2^(1:5)\n\n[1]  2  4  8 16 32\n\n\nNotice that what R has done here is raise 2 to the power of each number in the vector.\nWe can also perform arithmetic on multiple vectors, for example:\n\nx &lt;- 1:4\ny &lt;- 5:8\nx + y\n\n[1]  6  8 10 12\n\n\nThe vectorized nature of R is an incredibly useful feature that can often save you lots of time."
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#brief-note-on-data-types",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#brief-note-on-data-types",
    "title": "Intro to R",
    "section": "Brief note on data types",
    "text": "Brief note on data types\nThere are 4 main of data types:\n\ndouble\ninteger\nlogical(TRUE and FALSE)\ncharacter\n\nSome operations can only be performed on certain types of data. For example, mathematical functions typically need to be done one types double or integer. We can use the typeof function to identify a data type:\n\ntypeof(x)\n\nOr for a categorical vector:\n\ntypeof(c(\"red\", \"organge\", \"blue\"))\n\n\n\n\n\n\n\nNote\n\n\n\nc() combines its arguments to form a vector.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you combine data of different types in a vector, R will **coerce** them to be of the same type. It is important to keep words/characters and numbers separate!"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#combining-vectors-into-a-dataframe",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#combining-vectors-into-a-dataframe",
    "title": "Intro to R",
    "section": "Combining vectors into a dataframe",
    "text": "Combining vectors into a dataframe\nWe can also combine vectors into a dataframe. Dataframes are extremely useful, and are typically how your data would be stored and worked with in R. Key to note is that each vector must be the same length.\n\ncats &lt;- data.frame(coat = c(\"calico\", \"black\", \"tabby\"),\n                    weight = c(2.1, 5.0, 3.2),\n                    likes_string = c(1, 0, 1))\ncats\n\n    coat weight likes_string\n1 calico    2.1            1\n2  black    5.0            0\n3  tabby    3.2            1"
  },
  {
    "objectID": "posts/Intro_to_R/Intro_R_Fall2023.html#experiment",
    "href": "posts/Intro_to_R/Intro_R_Fall2023.html#experiment",
    "title": "Intro to R",
    "section": "Experiment",
    "text": "Experiment\nExcept built-in functions, R support external packages. When downloading R, it ships with some packages. Look up the whole list by:\n\nlibrary() \n\nTo download new packages, do\n\ninstall.packages(\"name-of-the-package\")\n\nTo make a package at your disposal,\n\nlibrary(MASS)\n\nWe will play with a data set called Boston in the MASS package. Use\n\n?Boston\n\n\ndim(Boston) # dimension (506 rows and 14 columns)\n\n[1] 506  14\n\nhead(Boston) # see the first 6 rows \n\n     crim zn indus chas   nox    rm  age    dis rad tax ptratio  black lstat\n1 0.00632 18  2.31    0 0.538 6.575 65.2 4.0900   1 296    15.3 396.90  4.98\n2 0.02731  0  7.07    0 0.469 6.421 78.9 4.9671   2 242    17.8 396.90  9.14\n3 0.02729  0  7.07    0 0.469 7.185 61.1 4.9671   2 242    17.8 392.83  4.03\n4 0.03237  0  2.18    0 0.458 6.998 45.8 6.0622   3 222    18.7 394.63  2.94\n5 0.06905  0  2.18    0 0.458 7.147 54.2 6.0622   3 222    18.7 396.90  5.33\n6 0.02985  0  2.18    0 0.458 6.430 58.7 6.0622   3 222    18.7 394.12  5.21\n  medv\n1 24.0\n2 21.6\n3 34.7\n4 33.4\n5 36.2\n6 28.7\n\ncolnames(Boston) # column names\n\n [1] \"crim\"    \"zn\"      \"indus\"   \"chas\"    \"nox\"     \"rm\"      \"age\"    \n [8] \"dis\"     \"rad\"     \"tax\"     \"ptratio\" \"black\"   \"lstat\"   \"medv\"   \n\nboxplot(Boston$medv) # boxplot of median house price\n\n\n\nboxplot(Boston$lstat) # percent of households with low socioeconomic status\n\n\n\ncor(Boston$medv, Boston$lstat) # Pearson correlation\n\n[1] -0.7376627\n\nmy_model &lt;- lm(medv ~ lstat, data = Boston)\nsummary(my_model)\n\n\nCall:\nlm(formula = medv ~ lstat, data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.168  -3.990  -1.318   2.034  24.500 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 34.55384    0.56263   61.41   &lt;2e-16 ***\nlstat       -0.95005    0.03873  -24.53   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.216 on 504 degrees of freedom\nMultiple R-squared:  0.5441,    Adjusted R-squared:  0.5432 \nF-statistic: 601.6 on 1 and 504 DF,  p-value: &lt; 2.2e-16\n\nplot(my_model) # diagnostic plots"
  },
  {
    "objectID": "posts/ggplot/index.html#some-other-plots",
    "href": "posts/ggplot/index.html#some-other-plots",
    "title": "R Visualization",
    "section": "Some other plots",
    "text": "Some other plots\n\n# install.packages(\"GGally\")\nlibrary(GGally)\npenguins %&gt;%\n  select(species, body_mass_g, ends_with(\"_mm\")) %&gt;% \n  GGally::ggpairs(aes(color = species)) +\n  scale_colour_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) + \n    theme_minimal()\n\n\n\n\n\nExample graphs using the penguins data\nThe R Graph Gallery"
  },
  {
    "objectID": "posts/ggplot/index.html#references",
    "href": "posts/ggplot/index.html#references",
    "title": "R Visualization",
    "section": "References",
    "text": "References\n\nhttps://allisonhorst.github.io/palmerpenguins/articles/intro.html\nhttps://allisonhorst.github.io/palmerpenguins/articles/examples.html\nhttps://education.rstudio.com/blog/2020/07/palmerpenguins-cran/"
  }
]